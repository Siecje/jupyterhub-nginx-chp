# Things to fix:
#  - More code comments
#  - Optional wrapper script that exposes same cmdline params as node chp
#  - URL routing is inefficient now, build and use an actual trie
#  - Unlike CHP, we do not count the last accessed timestamp per route
#    Find out what this is used for (pruning probably?) and implement it
#    if necessary
#  - More testing is needed to see find edge cases that must surely exist
worker_processes auto;
daemon off;

env CONFIGPROXY_AUTH_TOKEN;
events {
	worker_connections 768;
}


http {
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	keepalive_timeout 65;
	types_hash_max_size 2048;
	# server_tokens off;

	error_log /tmp/err warn;
	access_log /tmp/log;

	resolver 127.0.0.1;

	map $http_upgrade $connection_upgrade {
	        default upgrade;
	        ''      close;
	}


	lua_shared_dict routes 16m;


	server {
		listen 8000;

		location / {
			set $upstream "";
			access_by_lua_block {
				local routespec = ngx.var.request_uri

				local specs = ngx.shared.routes:get_keys()
				table.sort(specs, function(a, b) return string.length(a) < string.length(b) end)
				for i, spec in pairs(specs) do
					if string.sub(routespec,1,string.len(spec)) == spec then
						ngx.var.upstream = ngx.shared.routes:get(spec)

						return
					end
				end
				if target == nil then
					ngx.var.upstream = 'http://127.0.0.1:8081'
				end
			}

			proxy_pass $upstream;

			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection $connection_upgrade;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header X-Original-URI $request_uri;
		    proxy_set_header Host $host:$server_port;
		}
	}

	server {
		listen 8001;

		location /api/routes {
			content_by_lua_block {
				-- Check for authorization header
				local os = require "os"
				local authtoken = os.getenv('CONFIGPROXY_AUTH_TOKEN')

				if authtoken == nil then
					ngx.say('Authentication token not set up for proxy API')
					ngx.exit(500)
					return
				end

				local reqAuth = 'token ' .. authtoken

				if ngx.var.http_AUTHORIZATION ~= reqAuth then
					ngx.exit(403);
				end

				if ngx.req.get_method() == 'POST' then
					local cjson = require "cjson"
					local string = require "string"

					ngx.req.read_body()
					local body = cjson.decode(ngx.var.request_body)
					local target = body['target']
					if target == nil then
						ngx.exit(400)
					end

					local routespec = string.sub(ngx.var.request_uri, 12)

					ngx.shared.routes:set(routespec, target)
					ngx.exit(201)
				elseif ngx.req.get_method() == 'DELETE' then
					local routespec = string.sub(ngx.var.request_uri, 12)

					ngx.shared.routes:delete(routespec)
				elseif ngx.req.get_method() == 'GET' then
					local cjson = require "cjson"

					local routes = {}

					local routespecs = ngx.shared.routes:get_keys()

					for i, spec in pairs(routespecs) do
						routes[spec] = { target = ngx.shared.routes:get(spec) }
					end

					ngx.say(cjson.encode(routes))
				end

			}
		}
	}
}
