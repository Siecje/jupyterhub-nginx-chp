worker_processes auto;
daemon off;

events {
    worker_connections 768;
}


# This needs to be in 'main' since otherwise nginx
# will try to write to /var/log/nginx/error.log and failed
# because it does not have permissions
error_log stderr warn;

# We do not really need / care about a pidfile
pid /dev/null;

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    # server_tokens off;
    client_body_temp_path /tmp;
    proxy_temp_path /tmp;
    fastcgi_temp_path /tmp;
    uwsgi_temp_path /tmp;
    scgi_temp_path /tmp;


    # access_log does not support 'stderr' directive directly
    access_log /dev/stderr;

    resolver {{ dns_resolver }};

    map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
    }

    # The shared memory area used to store route config
    lua_shared_dict routes 16m;

    server {
        listen {{public_ip}}:{{ public_port }};

        location / {
            set $upstream "";
            access_by_lua '
                local routespec = ngx.var.request_uri

                local specs = ngx.shared.routes:get_keys()
                table.sort(specs, function(a, b) return string.length(a) < string.length(b) end)
                for i, spec in pairs(specs) do
                    if string.sub(routespec,1,string.len(spec)) == spec then
                        ngx.var.upstream = ngx.shared.routes:get(spec)

                        return
                    end
                end
                if target == nil then
                    {% if default_target -%}
                        ngx.var.upstream = "{{default_target}}"
                    {% else -%}
                        ngx.exit(404)
                    {% endif -%}
                end
            ';

            proxy_pass $upstream;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Host $host:$server_port;
        }
    }

    server {
        listen {{api_ip}}:{{api_port}};

        location /api/routes {
            content_by_lua '
                -- Check for authorization header
                local reqAuth = "token {{authtoken}}"

                if ngx.var.http_AUTHORIZATION ~= reqAuth then
                    ngx.exit(403);
                end

                if ngx.req.get_method() == "POST" then
                    local cjson = require "cjson"
                    local string = require "string"

                    ngx.req.read_body()
                    local body = cjson.decode(ngx.var.request_body)
                    local target = body["target"]
                    if target == nil then
                        ngx.exit(400)
                    end

                    local routespec = string.sub(ngx.var.request_uri, 12)

                    ngx.shared.routes:set(routespec, target)
                    ngx.exit(201)
                elseif ngx.req.get_method() == "DELETE" then
                    local routespec = string.sub(ngx.var.request_uri, 12)

                    ngx.shared.routes:delete(routespec)
                elseif ngx.req.get_method() == "GET" then
                    local cjson = require "cjson"

                    local routes = {}

                    local routespecs = ngx.shared.routes:get_keys()

                    for i, spec in pairs(routespecs) do
                        routes[spec] = { target = ngx.shared.routes:get(spec) }
                    end

                    ngx.say(cjson.encode(routes))
                end

            ';
        }
    }
}
